{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Card, Badge, Stack, Layout } from '@shopify/polaris';\nimport CreateScript from './CreateScript.js';\nimport '../css/AppStyle.css';\nimport axios from 'axios';\n\nconst config = require('../../server/config/httpConfig.js');\n\nimport DeleteScript from './DeleteScript';\n\nfunction ScriptComponent({\n  valueID\n}) {\n  const isInitialMount = useRef(true);\n  const {\n    0: refresh,\n    1: setRefresh\n  } = useState(false);\n  const {\n    0: displayMode,\n    1: setDisplayMode\n  } = useState();\n  const {\n    0: avaliable,\n    1: setAvaliable\n  } = useState(true);\n  const dynamic = [valueID, 'dynamic', avaliable];\n  const manual = [valueID, 'manual', avaliable];\n  const {\n    0: pending,\n    1: setPending\n  } = useState(true);\n  const handleRefresh = useCallback(() => setRefresh(true));\n  useEffect(() => {\n    async function getData() {\n      const db_data = {\n        search: valueID\n      };\n      await axios.post(config.HTTP_API + '/store/search/mode', db_data).then(result => {\n        result.data[0].upsell_mode ? setAvaliable(false) : setAvaliable(true);\n        result.data[0].upsell_mode ? setDisplayMode(result.data[0].upsell_mode) : setDisplayMode('none');\n        setPending(false);\n      });\n    }\n\n    async function fetchData() {\n      if (isInitialMount.current && valueID) {\n        isInitialMount.current = false;\n        await getData();\n      }\n\n      if (refresh) {\n        await getData();\n        setRefresh(false);\n      }\n    }\n\n    fetchData();\n  });\n  return __jsx(React.Fragment, null, !pending ? __jsx(\"div\", null, __jsx(Layout.AnnotatedSection, {\n    title: \"Activate Upsell\",\n    description: \"Click to activate the upsell. Only one mode can be activated each time, you can change the mode after disable the current mode.\"\n  }, __jsx(\"div\", {\n    className: \"flex-container\"\n  }, __jsx(\"div\", {\n    style: {\n      \"marginRight\": \"10px\"\n    }\n  }, __jsx(Card, {\n    sectioned: true,\n    title: \"Dynamic Mode\"\n  }, __jsx(CreateScript, {\n    manual: dynamic,\n    valueID: valueID,\n    handleRefresh: handleRefresh\n  }), __jsx(\"br\", null), __jsx(\"p\", null, \"Upsell will contain the first product in customer's cart and \", __jsx(\"a\", {\n    href: \"/faq-layout#recommend-product\"\n  }, \"recommended products\"), \".\"), __jsx(\"br\", null))), __jsx(\"div\", {\n    style: {\n      \"marginLeft\": \"10px\"\n    }\n  }, __jsx(Card, {\n    sectioned: true,\n    title: \"Manual Mode\"\n  }, __jsx(CreateScript, {\n    manual: manual,\n    valueID: valueID,\n    handleRefresh: handleRefresh\n  }), __jsx(\"br\", null), __jsx(\"p\", null, \"Upsell will contain selected products, which should be selected manually. \", __jsx(\"a\", {\n    href: \"/faq-layout#mode\"\n  }, \"Read more\")), __jsx(\"br\", null)))), __jsx(Card, {\n    sectioned: true\n  }, __jsx(Stack, null, __jsx(Stack.Item, {\n    fill: true\n  }, __jsx(\"h2\", null, \"Current activated upsell mode\")), __jsx(Stack.Item, null, displayMode != 'none' ? __jsx(Badge, {\n    status: \"success\"\n  }, displayMode) : __jsx(Badge, null, displayMode))))), __jsx(Layout.AnnotatedSection, {\n    title: \"Disable Upsell\",\n    description: \"Temporarily disable all functions.\"\n  }, __jsx(DeleteScript, {\n    valueID: valueID,\n    handleRefresh: handleRefresh\n  })), __jsx(\"hr\", null)) : null);\n}\n\nexport default ScriptComponent;","map":{"version":3,"sources":["C:/Users/molek/OneDrive/Desktop/Work/Magic-Upsell/client/components/ScriptComponent.js"],"names":["React","useState","useEffect","useRef","useCallback","Card","Badge","Stack","Layout","CreateScript","axios","config","require","DeleteScript","ScriptComponent","valueID","isInitialMount","refresh","setRefresh","displayMode","setDisplayMode","avaliable","setAvaliable","dynamic","manual","pending","setPending","handleRefresh","getData","db_data","search","post","HTTP_API","then","result","data","upsell_mode","fetchData","current"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,EAAmCC,MAAnC,EAA0CC,WAA1C,QAA6D,OAA7D;AACA,SACEC,IADF,EAEEC,KAFF,EAGEC,KAHF,EAIAC,MAJA,QAKO,kBALP;AAMA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAO,qBAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,mCAAD,CAAtB;;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,SAASC,eAAT,CAAyB;AAACC,EAAAA;AAAD,CAAzB,EAAoC;AAClC,QAAMC,cAAc,GAAGb,MAAM,CAAC,IAAD,CAA7B;AACA,QAAM;AAAA,OAACc,OAAD;AAAA,OAAUC;AAAV,MAAwBjB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM;AAAA,OAACkB,WAAD;AAAA,OAAcC;AAAd,MAAgCnB,QAAQ,EAA9C;AACA,QAAM;AAAA,OAACoB,SAAD;AAAA,OAAYC;AAAZ,MAA4BrB,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAMsB,OAAO,GAAG,CAACR,OAAD,EAAS,SAAT,EAAmBM,SAAnB,CAAhB;AACA,QAAMG,MAAM,GAAG,CAACT,OAAD,EAAS,QAAT,EAAkBM,SAAlB,CAAf;AACA,QAAM;AAAA,OAACI,OAAD;AAAA,OAAUC;AAAV,MAAwBzB,QAAQ,CAAC,IAAD,CAAtC;AAEF,QAAM0B,aAAa,GAAGvB,WAAW,CAAC,MAAMc,UAAU,CAAC,IAAD,CAAjB,CAAjC;AAEEhB,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAe0B,OAAf,GAAyB;AACvB,YAAMC,OAAO,GAAG;AAACC,QAAAA,MAAM,EAACf;AAAR,OAAhB;AACA,YAAML,KAAK,CAACqB,IAAN,CAAWpB,MAAM,CAACqB,QAAP,GAAkB,oBAA7B,EAAmDH,OAAnD,EAA4DI,IAA5D,CAAiEC,MAAM,IAAI;AAC/EA,QAAAA,MAAM,CAACC,IAAP,CAAY,CAAZ,EAAeC,WAAf,GAA6Bd,YAAY,CAAC,KAAD,CAAzC,GAAmDA,YAAY,CAAC,IAAD,CAA/D;AACAY,QAAAA,MAAM,CAACC,IAAP,CAAY,CAAZ,EAAeC,WAAf,GAA6BhB,cAAc,CAACc,MAAM,CAACC,IAAP,CAAY,CAAZ,EAAeC,WAAhB,CAA3C,GAA0EhB,cAAc,CAAC,MAAD,CAAxF;AACPM,QAAAA,UAAU,CAAC,KAAD,CAAV;AACM,OAJK,CAAN;AAKD;;AACD,mBAAeW,SAAf,GAA0B;AACxB,UAAIrB,cAAc,CAACsB,OAAf,IAA0BvB,OAA9B,EAAuC;AACrCC,QAAAA,cAAc,CAACsB,OAAf,GAAyB,KAAzB;AACA,cAAMV,OAAO,EAAb;AACD;;AACD,UAAGX,OAAH,EAAY;AACV,cAAMW,OAAO,EAAb;AACAV,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF;;AACDmB,IAAAA,SAAS;AACV,GApBQ,CAAT;AAsBA,SACF,4BACC,CAACZ,OAAD,GACG,mBACJ,MAAC,MAAD,CAAQ,gBAAR;AACY,IAAA,KAAK,EAAC,iBADlB;AAEY,IAAA,WAAW,EAAC;AAFxB,KAIM;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AAAK,IAAA,KAAK,EAAE;AAAC,qBAAc;AAAf;AAAZ,KACE,MAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,KAAK,EAAC;AAAtB,KACE,MAAC,YAAD;AAAc,IAAA,MAAM,EAAEF,OAAtB;AAA+B,IAAA,OAAO,EAAER,OAAxC;AAAiD,IAAA,aAAa,EAAEY;AAAhE,IADF,EAEE,iBAFF,EAGE,kFAAgE;AAAG,IAAA,IAAI,EAAC;AAAR,4BAAhE,MAHF,EAIE,iBAJF,CADF,CADF,EASE;AAAK,IAAA,KAAK,EAAE;AAAC,oBAAa;AAAd;AAAZ,KACE,MAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,KAAK,EAAC;AAAtB,KACE,MAAC,YAAD;AAAc,IAAA,MAAM,EAAEH,MAAtB;AAA8B,IAAA,OAAO,EAAET,OAAvC;AAAgD,IAAA,aAAa,EAAEY;AAA/D,IADF,EAEE,iBAFF,EAGE,+FAA6E;AAAG,IAAA,IAAI,EAAC;AAAR,iBAA7E,CAHF,EAIE,iBAJF,CADF,CATF,CAJN,EAsBM,MAAC,IAAD;AAAM,IAAA,SAAS;AAAf,KACE,MAAC,KAAD,QACE,MAAC,KAAD,CAAO,IAAP;AAAY,IAAA,IAAI;AAAhB,KACE,kDADF,CADF,EAIE,MAAC,KAAD,CAAO,IAAP,QACCR,WAAW,IAAI,MAAf,GACC,MAAC,KAAD;AAAO,IAAA,MAAM,EAAC;AAAd,KAAyBA,WAAzB,CADD,GAGC,MAAC,KAAD,QAAQA,WAAR,CAJF,CAJF,CADF,CAtBN,CADI,EAsCJ,MAAC,MAAD,CAAQ,gBAAR;AACY,IAAA,KAAK,EAAC,gBADlB;AAEY,IAAA,WAAW,EAAC;AAFxB,KAGA,MAAC,YAAD;AAAc,IAAA,OAAO,EAAEJ,OAAvB;AAAgC,IAAA,aAAa,EAAEY;AAA/C,IAHA,CAtCI,EA2CJ,iBA3CI,CADH,GA+CD,IAhDA,CADE;AAqDD;;AAED,eAAeb,eAAf","sourcesContent":["import React, { useState,useEffect,useRef,useCallback } from 'react';\r\nimport {\r\n  Card,\r\n  Badge,\r\n  Stack,\r\nLayout\r\n} from '@shopify/polaris';\r\nimport CreateScript from './CreateScript.js';\r\nimport '../css/AppStyle.css';\r\nimport axios from 'axios';\r\nconst config = require('../../server/config/httpConfig.js');\r\nimport DeleteScript from './DeleteScript';\r\n\r\nfunction ScriptComponent({valueID}) {\r\n  const isInitialMount = useRef(true);\r\n  const [refresh, setRefresh] = useState(false);\r\n  const [displayMode, setDisplayMode] = useState();\r\n  const [avaliable, setAvaliable] = useState(true);\r\n  const dynamic = [valueID,'dynamic',avaliable];\r\n  const manual = [valueID,'manual',avaliable];\r\n  const [pending, setPending] = useState(true);\r\n\r\nconst handleRefresh = useCallback(() => setRefresh(true));\r\n\r\n  useEffect(() => {\r\n    async function getData() {\r\n      const db_data = {search:valueID};\r\n      await axios.post(config.HTTP_API + '/store/search/mode', db_data).then(result => {\r\n        result.data[0].upsell_mode ? setAvaliable(false) : setAvaliable(true);\r\n        result.data[0].upsell_mode ? setDisplayMode(result.data[0].upsell_mode) : setDisplayMode('none');\r\n\tsetPending(false);\r\n      });\r\n    }\r\n    async function fetchData(){\r\n      if (isInitialMount.current && valueID) {\r\n        isInitialMount.current = false;\r\n        await getData();\r\n      }\r\n      if(refresh) {\r\n        await getData();\r\n        setRefresh(false);\r\n      }\r\n    }\r\n    fetchData();\r\n  });\r\n\r\n  return (\r\n<>\r\n{!pending ?\r\n    <div>\r\n<Layout.AnnotatedSection\r\n            title=\"Activate Upsell\"\r\n            description=\"Click to activate the upsell. Only one mode can be activated each time, you can change the mode after disable the current mode.\">\r\n\r\n      <div className=\"flex-container\">\r\n        <div style={{\"marginRight\":\"10px\"}}>\r\n          <Card sectioned title=\"Dynamic Mode\">\r\n            <CreateScript manual={dynamic} valueID={valueID} handleRefresh={handleRefresh}/>\r\n            <br/>\r\n            <p>Upsell will contain the first product in customer's cart and <a href=\"/faq-layout#recommend-product\">recommended products</a>.</p>\r\n            <br/>\r\n          </Card>\r\n        </div>\r\n        <div style={{\"marginLeft\":\"10px\"}}>\r\n          <Card sectioned title=\"Manual Mode\">\r\n            <CreateScript manual={manual} valueID={valueID} handleRefresh={handleRefresh}/>\r\n            <br/>\r\n            <p>Upsell will contain selected products, which should be selected manually. <a href=\"/faq-layout#mode\">Read more</a></p>\r\n            <br/>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n      <Card sectioned>\r\n        <Stack>\r\n          <Stack.Item fill>\r\n            <h2>Current activated upsell mode</h2>\r\n          </Stack.Item>\r\n          <Stack.Item>\r\n          {displayMode != 'none' ? (\r\n            <Badge status='success'>{displayMode}</Badge>\r\n          ) : (\r\n            <Badge>{displayMode}</Badge>\r\n          )}\r\n          </Stack.Item>\r\n        </Stack>\r\n      </Card>\r\n</Layout.AnnotatedSection>\r\n<Layout.AnnotatedSection\r\n            title=\"Disable Upsell\"\r\n            description=\"Temporarily disable all functions.\">\r\n<DeleteScript valueID={valueID} handleRefresh={handleRefresh}/>\r\n</Layout.AnnotatedSection>\r\n<hr/>\r\n    </div>\r\n:\r\nnull\r\n}\r\n</>\r\n  )\r\n}\r\n\r\nexport default ScriptComponent;\r\n"]},"metadata":{},"sourceType":"module"}